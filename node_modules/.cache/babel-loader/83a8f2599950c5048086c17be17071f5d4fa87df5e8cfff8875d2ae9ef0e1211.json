{"ast":null,"code":"/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n * @format\n */\n\n'use strict';\n\n// eslint-disable-line strict\n\n/**\n * Traverses properties on objects and arrays. If an intermediate property is\n * either null or undefined, it is instead returned. The purpose of this method\n * is to simplify extracting properties from a chain of maybe-typed properties.\n *\n * === EXAMPLE ===\n *\n * Consider the following type:\n *\n *   const props: {\n *     user: ?{\n *       name: string,\n *       friends: ?Array<User>,\n *     }\n *   };\n *\n * Getting to the friends of my first friend would resemble:\n *\n *   props.user &&\n *   props.user.friends &&\n *   props.user.friends[0] &&\n *   props.user.friends[0].friends\n *\n * Instead, `idx` allows us to safely write:\n *\n *   idx(props, _ => _.user.friends[0].friends)\n *\n * The second argument must be a function that returns one or more nested member\n * expressions. Any other expression has undefined behavior.\n *\n * === NOTE ===\n *\n * The code below exists for the purpose of illustrating expected behavior and\n * is not meant to be executed. The `idx` function is used in conjunction with a\n * Babel transform that replaces it with better performing code:\n *\n *   props.user == null ? props.user :\n *   props.user.friends == null ? props.user.friends :\n *   props.user.friends[0] == null ? props.user.friends[0] :\n *   props.user.friends[0].friends\n *\n * All this machinery exists due to the fact that an existential operator does\n * not currently exist in JavaScript.\n */\nfunction idx(input, accessor) {\n  try {\n    return accessor(input);\n  } catch (error) {\n    if (error instanceof TypeError) {\n      if (nullPattern.test(error)) {\n        return null;\n      } else if (undefinedPattern.test(error)) {\n        return undefined;\n      }\n    }\n    throw error;\n  }\n}\n\n/**\n * Some actual error messages for null:\n *\n * TypeError: Cannot read property 'bar' of null\n * TypeError: Cannot convert null value to object\n * TypeError: foo is null\n * TypeError: null has no properties\n * TypeError: null is not an object (evaluating 'foo.bar')\n * TypeError: null is not an object (evaluating '(\" undefined \", null).bar')\n */\nvar nullPattern = /^null | null$|^[^(]* null /i;\nvar undefinedPattern = /^undefined | undefined$|^[^(]* undefined /i;\nidx.default = idx;\nmodule.exports = idx;","map":{"version":3,"names":["idx","input","accessor","error","TypeError","nullPattern","test","undefinedPattern","undefined","default","module","exports"],"sources":["/Users/sodii/Documents/hotels/node_modules/idx/lib/idx.js"],"sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n * @format\n */\n\n'use strict'; // eslint-disable-line strict\n\n/**\n * Traverses properties on objects and arrays. If an intermediate property is\n * either null or undefined, it is instead returned. The purpose of this method\n * is to simplify extracting properties from a chain of maybe-typed properties.\n *\n * === EXAMPLE ===\n *\n * Consider the following type:\n *\n *   const props: {\n *     user: ?{\n *       name: string,\n *       friends: ?Array<User>,\n *     }\n *   };\n *\n * Getting to the friends of my first friend would resemble:\n *\n *   props.user &&\n *   props.user.friends &&\n *   props.user.friends[0] &&\n *   props.user.friends[0].friends\n *\n * Instead, `idx` allows us to safely write:\n *\n *   idx(props, _ => _.user.friends[0].friends)\n *\n * The second argument must be a function that returns one or more nested member\n * expressions. Any other expression has undefined behavior.\n *\n * === NOTE ===\n *\n * The code below exists for the purpose of illustrating expected behavior and\n * is not meant to be executed. The `idx` function is used in conjunction with a\n * Babel transform that replaces it with better performing code:\n *\n *   props.user == null ? props.user :\n *   props.user.friends == null ? props.user.friends :\n *   props.user.friends[0] == null ? props.user.friends[0] :\n *   props.user.friends[0].friends\n *\n * All this machinery exists due to the fact that an existential operator does\n * not currently exist in JavaScript.\n */\n\nfunction idx(input, accessor) {\n  try {\n    return accessor(input);\n  } catch (error) {\n    if (error instanceof TypeError) {\n      if (nullPattern.test(error)) {\n        return null;\n      } else if (undefinedPattern.test(error)) {\n        return undefined;\n      }\n    }\n    throw error;\n  }\n}\n\n/**\n * Some actual error messages for null:\n *\n * TypeError: Cannot read property 'bar' of null\n * TypeError: Cannot convert null value to object\n * TypeError: foo is null\n * TypeError: null has no properties\n * TypeError: null is not an object (evaluating 'foo.bar')\n * TypeError: null is not an object (evaluating '(\" undefined \", null).bar')\n */\nvar nullPattern = /^null | null$|^[^(]* null /i;\nvar undefinedPattern = /^undefined | undefined$|^[^(]* undefined /i;\n\nidx.default = idx;\nmodule.exports = idx;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AAAE;;AAEd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,GAAG,CAACC,KAAK,EAAEC,QAAQ,EAAE;EAC5B,IAAI;IACF,OAAOA,QAAQ,CAACD,KAAK,CAAC;EACxB,CAAC,CAAC,OAAOE,KAAK,EAAE;IACd,IAAIA,KAAK,YAAYC,SAAS,EAAE;MAC9B,IAAIC,WAAW,CAACC,IAAI,CAACH,KAAK,CAAC,EAAE;QAC3B,OAAO,IAAI;MACb,CAAC,MAAM,IAAII,gBAAgB,CAACD,IAAI,CAACH,KAAK,CAAC,EAAE;QACvC,OAAOK,SAAS;MAClB;IACF;IACA,MAAML,KAAK;EACb;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIE,WAAW,GAAG,6BAA6B;AAC/C,IAAIE,gBAAgB,GAAG,4CAA4C;AAEnEP,GAAG,CAACS,OAAO,GAAGT,GAAG;AACjBU,MAAM,CAACC,OAAO,GAAGX,GAAG"},"metadata":{},"sourceType":"script","externalDependencies":[]}